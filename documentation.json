{
    "pipes": [],
    "interfaces": [
        {
            "name": "CustomHttpResponse",
            "id": "interface-CustomHttpResponse-44725d6e70e5fa0341859612491ec06401d667bac7ca8a463752b60a23c6913ef6ad306baad46f7036bc85fc9fd8b05033c0d142cfa01f6ad11addf5c2e44832",
            "file": "src/app/model/custom-http-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CustomHttpResponse {\r\n  httpStatusCode: number;\r\n  httpStatus: string;\r\n  reason: string;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "httpStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "httpStatusCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "reason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "UserTableItem",
            "id": "interface-UserTableItem-6b5008ac39ac96556df583cbec89469a191b6a7c34b02592a42ac585adbdac860b0245a8dc88251cadafc1e68c852d52cf4bc66fb970040fe6e979b497e49b85",
            "file": "src/app/components/user/user-table/user-table-datasource.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface UserTableItem {\n  name: string;\n  id: number;\n}\n\n// TODO: replace this with real data from your application\nconst EXAMPLE_DATA: UserTableItem[] = [\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n];\n\n/**\n * Data source for the UserTable view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class UserTableDataSource extends DataSource<UserTableItem> {\n  data: UserTableItem[] = EXAMPLE_DATA;\n  paginator: MatPaginator | undefined;\n  sort: MatSort | undefined;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<UserTableItem[]> {\n    if (this.paginator && this.sort) {\n      // Combine everything that affects the rendered data into one update\n      // stream for the data-table to consume.\n      return merge(observableOf(this.data), this.paginator.page, this.sort.sortChange)\n        .pipe(map(() => {\n          return this.getPagedData(this.getSortedData([...this.data ]));\n        }));\n    } else {\n      throw Error('Please set the paginator and sort on the data source before connecting.');\n    }\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect(): void {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: UserTableItem[]): UserTableItem[] {\n    if (this.paginator) {\n      const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n      return data.splice(startIndex, this.paginator.pageSize);\n    } else {\n      return data;\n    }\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: UserTableItem[]): UserTableItem[] {\n    if (!this.sort || !this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort?.direction === 'asc';\n      switch (this.sort?.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'id': return compare(+a.id, +b.id, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a: string | number, b: string | number, isAsc: boolean): number {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-1eae63f333d04fa465cd148448882ea51cc44b47b5ba091eb50604179401a65dd2b03ae6e380e34e73206a1de60e0548adcc1ea99475740a4b262becc0cc1a19",
            "file": "src/app/service/authentication.service.ts",
            "properties": [
                {
                    "name": "host",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "jwtHelper",
                    "defaultValue": "new JwtHelperService()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loggedInUsername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addUserToLocalCache",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUserFromLocalCache",
                    "args": [],
                    "optional": false,
                    "returnType": "User",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isUserLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<User>>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpClient,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { environment } from '../../environments/environment';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { User } from '../model/user';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthenticationService {\r\n  public host = environment.apiUrl;\r\n  private token: string;\r\n  private loggedInUsername: string;\r\n  private jwtHelper = new JwtHelperService();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(user: User): Observable<HttpResponse<User>> {\r\n    return this.http.post<User>(`${this.host}/user/login`, user, {\r\n      observe: 'response'\r\n    }).pipe(tap((res) => {\r\n      console.log(res);\r\n    }));\r\n  }\r\n\r\n  public register(user: User): Observable<User> {\r\n    return this.http.post<User>(\r\n      `${this.host}/user/register`,\r\n      user\r\n    );\r\n  }\r\n\r\n  public logOut(): void {\r\n    this.token = null;\r\n    this.loggedInUsername = null;\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('users');\r\n  }\r\n\r\n  public saveToken(token: string): void {\r\n    this.token = token;\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  //Don't name the token = token in prod. Security!!\r\n  public loadToken(): void {\r\n    this.token = localStorage.getItem('token');\r\n  }\r\n\r\n  public getToken(): string {\r\n    return this.token;\r\n  }\r\n\r\n  public addUserToLocalCache(user: User): void {\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n  }\r\n\r\n  public getUserFromLocalCache(): User {\r\n    return JSON.parse(localStorage.getItem('user'));\r\n  }\r\n\r\n  public isUserLoggedIn(): boolean {\r\n    this.loadToken();\r\n    if (this.token != null && this.token !== '') {\r\n      if (this.jwtHelper.decodeToken(this.token).sub != null || '') {\r\n        if (!this.jwtHelper.isTokenExpired(this.token)) {\r\n          this.loggedInUsername = this.jwtHelper.decodeToken(this.token).sub;\r\n          return true;\r\n        }\r\n      }\r\n    } else {\r\n      this.logOut();\r\n    }\r\n    return false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-379c106f94298c462f8f91359cb9d38a34755cdc9f1eb055c73b55677c1ab78662c2ba8393ff5cd796fdce897245dd583725a89a04a5e169b4685d508820e443",
            "file": "src/app/service/notification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "notify",
                    "args": [
                        {
                            "name": "type",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NotifierService } from 'angular-notifier';\nimport { NotificationType } from '../enum/notification-type.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  constructor(private notifier: NotifierService) { }\n\n  public notify(type: NotificationType, message: string) {\n    this.notifier.notify(type, message)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notifier",
                        "type": "NotifierService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "notifier",
                        "type": "NotifierService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-beacd269bd2f6ddfdf61539d4b124d2e688d0c92116a1bba37a2c58cb974ecced1426e284df57a050236fb9b99b13e678e481d86892fd66082eec908b0420821",
            "file": "src/app/service/user.service.ts",
            "properties": [
                {
                    "name": "host",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User | HttpErrorResponse>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addUsersToLocalCache",
                    "args": [
                        {
                            "name": "users",
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "users",
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUserFormData",
                    "args": [
                        {
                            "name": "loggedInUsername",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileImage",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormData",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "loggedInUsername",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileImage",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CustomHttpResponse | HttpErrorResponse>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<[] | HttpErrorResponse>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUsersFromLocalCache",
                    "args": [],
                    "optional": false,
                    "returnType": "User[]",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CustomHttpResponse | HttpErrorResponse>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProfileImage",
                    "args": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent | HttpErrorResponse>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User | HttpErrorResponse>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpEvent } from '@angular/common/http';\r\nimport { environment } from '../../environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../model/user';\r\nimport { CustomHttpResponse } from '../model/custom-http-response';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  private host = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getUsers(): Observable<User[] | HttpErrorResponse> {\r\n    return this.http.get<User[]>(`${this.host}/user/list`);\r\n  }\r\n\r\n  public getUser(username: string): Observable<User> {\r\n    return this.http.get<User>(`${this.host}/user/find/${username}`);\r\n  }\r\n\r\n  public addUser(formData: FormData): Observable<User | HttpErrorResponse> {\r\n    return this.http.post<User>(`${this.host}/user/add`, formData);\r\n  }\r\n\r\n  public updateUser(formData: FormData): Observable<User | HttpErrorResponse> {\r\n    return this.http.put<User>(`${this.host}/user/update`, formData);\r\n  }\r\n\r\n  public resetPassword(\r\n    email: string\r\n  ): Observable<CustomHttpResponse | HttpErrorResponse> {\r\n    return this.http.get<CustomHttpResponse>(\r\n      `${this.host}/user/reset-password/${email}`\r\n    );\r\n  }\r\n\r\n  public updateProfileImage(\r\n    formData: FormData\r\n  ): Observable<HttpEvent<User> | HttpErrorResponse> {\r\n    return this.http.put<User>(\r\n      `${this.host}/user/updateProfileImage`,\r\n      formData,\r\n      { reportProgress: true, observe: 'events' }\r\n    );\r\n  }\r\n\r\n  public deleteUser(\r\n    userId: number\r\n  ): Observable<CustomHttpResponse | HttpErrorResponse> {\r\n    return this.http.delete<CustomHttpResponse>(\r\n      `${this.host}/user/delete/${userId}`\r\n    );\r\n  }\r\n\r\n  //A better way would be to use InMemory saving\r\n  public addUsersToLocalCache(users: User[]): void {\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n  }\r\n\r\n  public getUsersFromLocalCache(): User[] {\r\n    if (localStorage.getItem('users')) {\r\n      return JSON.parse(localStorage.getItem('users'));\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public createUserFormData(\r\n    loggedInUsername: string,\r\n    user: User,\r\n    profileImage: File\r\n  ): FormData {\r\n    const formData = new FormData();\r\n    formData.append('currentUsername', loggedInUsername);\r\n    formData.append('firstName', user.firstName);\r\n    formData.append('lastName', user.lastName);\r\n    formData.append('username', user.username);\r\n    formData.append('email', user.email);\r\n    formData.append('role', user.role);\r\n    formData.append('profileImage', profileImage);\r\n    formData.append('active', JSON.stringify(user.active));\r\n    formData.append('notLocked', JSON.stringify(user.notLocked));\r\n    return formData;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthenticationGuard",
            "id": "injectable-AuthenticationGuard-4dd6bfe0ec9d04be1e0e0c7941a664d54050d3236ee6f23b43ecafcb68da2dcc2c90ee4ca8d3c686eef300e8089521c2153f1e64bc2ddea07d2f8d1ab79dc49d",
            "file": "src/app/guard/authentication.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUserLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { AuthenticationService } from '../service/authentication.service';\nimport { Router } from '@angular/router';\nimport { NotificationService } from '../service/notification.service';\nimport { NotificationType } from '../enum/notification-type.enum';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationGuard implements CanActivate {\n  constructor(\n    private authenticationService: AuthenticationService,\n    private router: Router,\n    private notificationService: NotificationService\n  ) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    return this.isUserLoggedIn();\n  }\n\n  private isUserLoggedIn(): boolean {\n    if (this.authenticationService.isUserLoggedIn()) {\n      return true;\n    } else {\n      this.notificationService.notify(NotificationType.ERROR, 'You need to log in to access this page')\n      this.router.navigateByUrl('/login');\n      return false;\n    }\n\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-f06ac9ad1c7dfa9e91d2a67fd6df31565cacc7eaed87b44f9a6f096370808cba57268404392fe8066da07a0025666611ff81730030735c3a71aedc35e6a5fb4f",
            "file": "src/app/interceptor/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "httpRequest",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "httpHandler",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "httpRequest",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpHandler",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from '../service/authentication.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authenticationService: AuthenticationService) {}\n\n  intercept(httpRequest: HttpRequest<any>, httpHandler: HttpHandler): Observable<HttpEvent<any>> {\n    if (httpRequest.url.includes(`${this.authenticationService.host}/user/login`)) {\n      return httpHandler.handle(httpRequest);\n    }\n    if (httpRequest.url.includes(`${this.authenticationService.host}/user/register`)) {\n      return httpHandler.handle(httpRequest);\n    }\n    if (httpRequest.url.includes(`${this.authenticationService.host}/user/reset-password`)) {\n      return httpHandler.handle(httpRequest);\n    }\n    this.authenticationService.loadToken();\n    const token = this.authenticationService.getToken();\n    const request = httpRequest.clone({setHeaders: { Authorization: `Bearer ${token}`}});\n    return httpHandler.handle(request);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "FileUploadStatus",
            "id": "class-FileUploadStatus-21ba6e825a542d1f6ffcc3d16a8918e41ae804c5f2a2a4ce167fc20280223a3f7b172ff89cfd02790c45aca143999f43d556dcb841ab5a82ff1fca6438df210d",
            "file": "src/app/model/file-upload.status.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FileUploadStatus {\r\n  public status: string;\r\n  public  percentage: number;\r\n\r\n  constructor() {\r\n    this.status = '';\r\n    this.percentage = 0;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 3
            },
            "properties": [
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-2f9a8262aa2fd55fef74182fdee865d79056b7d1981da6ca847b118d2cfef3a9654463d632735c3f6b9a023846ab9e5c557b5bdfad7949bee37ad529296d63c7",
            "file": "src/app/model/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class User\r\n{\r\n    public userId: string;\r\n    public firstName: string;\r\n    public lastName: string;\r\n    public username: string;\r\n    public email: string;\r\n    public lastLoginDate: Date;\r\n    public loginDateDisplay: Date;\r\n    public joinDate: Date;\r\n    public profileImageUrl: string;\r\n    public active: boolean;\r\n    public notLocked: boolean;\r\n    public role: string;\r\n    public authorities: [];\r\n\r\n\r\n  constructor() {\r\n    this.firstName = '';\r\n    this.lastName = '';\r\n    this.username = '';\r\n    this.email = '';\r\n    this.active = false;\r\n    this.notLocked = false;\r\n    this.role = '';\r\n    this.authorities = [];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authorities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "joinDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastLoginDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loginDateDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notLocked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "profileImageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserTableDataSource",
            "id": "class-UserTableDataSource-6b5008ac39ac96556df583cbec89469a191b6a7c34b02592a42ac585adbdac860b0245a8dc88251cadafc1e68c852d52cf4bc66fb970040fe6e979b497e49b85",
            "file": "src/app/components/user/user-table/user-table-datasource.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface UserTableItem {\n  name: string;\n  id: number;\n}\n\n// TODO: replace this with real data from your application\nconst EXAMPLE_DATA: UserTableItem[] = [\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n];\n\n/**\n * Data source for the UserTable view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class UserTableDataSource extends DataSource<UserTableItem> {\n  data: UserTableItem[] = EXAMPLE_DATA;\n  paginator: MatPaginator | undefined;\n  sort: MatSort | undefined;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<UserTableItem[]> {\n    if (this.paginator && this.sort) {\n      // Combine everything that affects the rendered data into one update\n      // stream for the data-table to consume.\n      return merge(observableOf(this.data), this.paginator.page, this.sort.sortChange)\n        .pipe(map(() => {\n          return this.getPagedData(this.getSortedData([...this.data ]));\n        }));\n    } else {\n      throw Error('Please set the paginator and sort on the data source before connecting.');\n    }\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect(): void {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: UserTableItem[]): UserTableItem[] {\n    if (this.paginator) {\n      const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n      return data.splice(startIndex, this.paginator.pageSize);\n    } else {\n      return data;\n    }\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: UserTableItem[]): UserTableItem[] {\n    if (!this.sort || !this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort?.direction === 'asc';\n      switch (this.sort?.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'id': return compare(+a.id, +b.id, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a: string | number, b: string | number, isAsc: boolean): number {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 35
            },
            "properties": [
                {
                    "name": "data",
                    "defaultValue": "EXAMPLE_DATA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserTableItem[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "description": "<p>Data source for the UserTable view. This class should\nencapsulate all logic for fetching and manipulating the displayed data\n(including sorting, pagination, and filtering).</p>\n",
            "rawdescription": "\n\nData source for the UserTable view. This class should\nencapsulate all logic for fetching and manipulating the displayed data\n(including sorting, pagination, and filtering).\n",
            "methods": [
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserTableItem[]>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConnect this data source to the table. The table will only update when\nthe returned stream emits new items.\n",
                    "description": "<p>Connect this data source to the table. The table will only update when\nthe returned stream emits new items.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1299,
                                "end": 1306,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A stream of the items to be rendered.</p>\n"
                        }
                    ]
                },
                {
                    "name": "disconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Called when the table is being destroyed. Use this function, to clean up\nany open connections or free any held resources that were set up during connect.\n",
                    "description": "<p> Called when the table is being destroyed. Use this function, to clean up\nany open connections or free any held resources that were set up during connect.</p>\n"
                },
                {
                    "name": "getPagedData",
                    "args": [
                        {
                            "name": "data",
                            "type": "UserTableItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UserTableItem[]",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPaginate the data (client-side). If you're using server-side pagination,\nthis would be replaced by requesting the appropriate data from the server.\n",
                    "description": "<p>Paginate the data (client-side). If you&#39;re using server-side pagination,\nthis would be replaced by requesting the appropriate data from the server.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "UserTableItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSortedData",
                    "args": [
                        {
                            "name": "data",
                            "type": "UserTableItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UserTableItem[]",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSort the data (client-side). If you're using server-side sorting,\nthis would be replaced by requesting the appropriate data from the server.\n",
                    "description": "<p>Sort the data (client-side). If you&#39;re using server-side sorting,\nthis would be replaced by requesting the appropriate data from the server.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "UserTableItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "DataSource",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-bb86dcceb98c8ff8b726000354ea4f0fcc1203eea181e6e59cb5c37ec1d448029e2cf47f72bb036702eafc01d07f5638afc3536ec50783a5ed691aff36831c4c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<!-- Toolbar -->\n<!-- <mat-toolbar color=\"primary\" class=\"app-header\">\n  <div><a href=\"https://www.positronx.io\" target=\"_blank\" class=\"positronx\">Ticklist</a></div>\n  <span class=\"nav-tool-items\">\n    <a mat-button routerLink=\"login\" routerLinkActive=\"active\">Log in</a>\n    <a mat-button mat-raised-button routerLink=\"register\" routerLinkActive=\"active\">Register</a>\n  </span>\n</mat-toolbar> -->\n<app-navigation></app-navigation>\n\n<notifier-container></notifier-container>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-5699f0fc554679c9795b2df6e7eae1fa9dad83bbd985a1e0b0598f06a566e215080608f46d3e12243034d9d4a4168bd32697b4d552d7044a265e5b0580b571a6",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogin",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendErrorNotification",
                    "args": [
                        {
                            "name": "error",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '../../service/authentication.service';\nimport { NotificationService } from '../../service/notification.service';\nimport { User } from '../../model/user';\nimport { Subscription } from 'rxjs';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { NotificationType } from '../../enum/notification-type.enum';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HeaderType } from '../../enum/header-type.enum';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  loginForm: FormGroup;\n  showLoading: boolean;\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private notificationService: NotificationService\n  ) {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.authenticationService.isUserLoggedIn()) {\n      this.router.navigateByUrl('/user-profile');\n    } else {\n      this.router.navigateByUrl('/login');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n  }\n\n  onLogin(user: User): void {\n    this.showLoading = true;\n    this.authenticationService.login(user).subscribe({\n      next: (response: HttpResponse<User>) => {\n        const token = response.headers.get(HeaderType.JWT_TOKEN);\n        this.authenticationService.saveToken(token);\n        this.authenticationService.addUserToLocalCache(response.body);\n        this.router.navigateByUrl('/user-profile');\n        this.showLoading = false;\n      },\n      error: (errorResponse: HttpErrorResponse) => {\n        console.log(errorResponse);\n        this.sendErrorNotification(\n          NotificationType.ERROR,\n          errorResponse.error.message\n        );\n        this.showLoading = false;\n      },\n      complete: () => {\n        this.showLoading = false;\n      },\n    });\n  }\n\n  sendErrorNotification(error: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(error, message);\n    } else {\n      this.notificationService.notify(\n        error,\n        'An error occured. Please try again.'\n      );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <mat-card class=\"box\">\n    <mat-card-header>\n      <mat-card-title>Log in</mat-card-title>\n    </mat-card-header>\n    <form class=\"example-form\" [formGroup]=\"loginForm\" >\n      <mat-card-content>\n        <mat-form-field class=\"example-full-width\">\n          <input matInput formControlName=\"username\" placeholder=\"Username\" name=\"username\">\n        </mat-form-field>\n        <mat-form-field class=\"example-full-width\">\n          <input matInput formControlName=\"password\" placeholder=\"Password\" name=\"password\">\n        </mat-form-field>\n      </mat-card-content>\n      <button type=\"submit\" [disabled]=\"showLoading\" mat-raised-button color=\"primary\" class=\"btn-block\" (click)=\"onLogin(loginForm.value)\">Log in</button>\n    </form>\n    <div>\n      <div class=\"mt-4\">\n        <div class=\"d-flex justify-content-center links\">\n            Don't have an account? <a class=\"ml-2\" style=\"color: #C2185B\" routerLink=\"/register\">Sign up</a>\n        </div>\n      </div>\n    </div>\n    <ng-container *ngIf=\"showLoading\">\n      <div class=\"overlay\"></div>\n      <mat-progress-spinner style=\"margin:0 auto;\" [mode]=\"'indeterminate'\"></mat-progress-spinner>\n    </ng-container>\n  </mat-card>\n</div>\n\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-ccd8893c4f7eb997ffefc8a38c45580ac0a3665928a34f50f53b554db6b40b1aa305550716c788fcae2ba57d0f9ba2deb8bcdb1dbea2d81f652102a79240983b",
            "file": "src/app/components/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [
                "./navigation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isHandset$",
                    "defaultValue": "this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(\n      map((result) => result.matches),\n      shareReplay()\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoginButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onLogOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { AuthenticationService } from '../../service/authentication.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.css'],\n})\nexport class NavigationComponent implements OnInit {\n  isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(\n      map((result) => result.matches),\n      shareReplay()\n    );\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private authenticationService: AuthenticationService,\n    private router: Router\n  ) {\n    if (!this.authenticationService.isUserLoggedIn()) {\n      this.router.navigateByUrl('/login');\n    }\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  public onLoginButton(): void {\n    this.router.navigateByUrl('/login');\n  }\n\n  public onLogOut(): void {\n    this.authenticationService.logOut();\n    this.router.navigateByUrl('/login');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidenav-container {\n  height: 100%;\n}\n\n.sidenav {\n  width: 200px;\n}\n\n.sidenav .mat-toolbar {\n  background: inherit;\n}\n\n.mat-toolbar.mat-primary {\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.flexExpand {\n  flex: 1 1 auto;\n}\n\n",
                    "styleUrl": "./navigation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav\n    #drawer\n    class=\"sidenav\"\n    fixedInViewport\n    [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n    [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n    [opened]=\"(isHandset$ | async) === false\"\n  >\n    <mat-toolbar>Menu</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item routerLink=\"/user-profile\">Profile</a>\n      <a mat-list-item routerLink=\"/user-table\">Users</a>\n      <a mat-list-item routerLink=\"/route-list\">Routes</a>\n      <a mat-list-item (click)=\"onLogOut()\">Log Out</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\"\n      >\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span class=\"Logo\">TICKLIST</span>\n      <span class=\"flexExpand\"></span>\n      <!-- <span><button (click)=\"onLoginButton()\" mat-raised-button color=\"basic\">Login</button></span> -->\n      <span class=\"Logo move-right\">Welcome, Marcel</span>\n    </mat-toolbar>\n    <!-- Add Content Here -->\n\n    <router-outlet></router-outlet>\n\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "NewUserFormComponent",
            "id": "component-NewUserFormComponent-86075c98200b10f4497d7494d1c80a1c27bf739aefb6ec9302e164cb86e035adbab263b95da5e09fb1356725383fea82490744c27c3a6eec25527b6374fa4081",
            "file": "src/app/components/user/user-table/new-user-form/new-user-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-user-form",
            "styleUrls": [
                "./new-user-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./new-user-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addUserForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "profileImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clickButton",
                    "args": [
                        {
                            "name": "buttonId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "buttonId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserRole",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveNewUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sendNotification",
                    "args": [
                        {
                            "name": "notificationType",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "notificationType",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup, NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { NotificationType } from 'src/app/enum/notification-type.enum';\nimport { Role } from 'src/app/enum/role.enum';\nimport { User } from 'src/app/model/user';\nimport { AuthenticationService } from 'src/app/service/authentication.service';\nimport { NotificationService } from 'src/app/service/notification.service';\nimport { UserService } from 'src/app/service/user.service';\n\n@Component({\n  selector: 'app-new-user-form',\n  templateUrl: './new-user-form.component.html',\n  styleUrls: ['./new-user-form.component.css']\n})\nexport class NewUserFormComponent implements OnInit, OnDestroy {\n  public fileName: string;\n  public profileImage: File;\n  public addUserForm: FormGroup;\n  private subscriptions: Subscription[] = [];\n\n  constructor(private userService: UserService, private authenticationService: AuthenticationService,\n    private notificationService: NotificationService) { }\n\n  ngOnInit(): void {\n  }\n\n  public saveNewUser(): void {\n    this.clickButton('new-user-save');\n  }\n\n  onSubmit() {\n    if (this.addUserForm.valid) {\n      // let formData = this.userService.createUserFormData(null, this.addUserForm.value, this.profileImage);\n      // formData = {\n      //   firstName: this.addUserForm.get('firstName')?.value,\n      //   lastName: this.addUserForm.get('lastName')?.value,\n      //   username: this.addUserForm.get('username')?.value,\n      //   email: this.addUserForm.get('email')?.value,\n      //   role: this.addUserForm.get('role')?.value,\n      //   // addressDto: {\n      //   //   street: this.addMemberForm.get('addressDto.street')?.value,\n      //   //   houseNumber: this.addMemberForm.get('addressDto.houseNumber')?.value,\n      //   //   postCode: this.addMemberForm.get('addressDto.postCode')?.value,\n      //   // },\n      // };\n\n      // this.userService.addUser({ formData });\n    }\n  }\n\n  private sendNotification(notificationType: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(notificationType, 'An error occurred. Please try again.');\n    }\n  }\n\n  public get isAdmin(): boolean {\n    return this.getUserRole() === Role.ADMIN || this.getUserRole() === Role.SUPER_ADMIN;\n  }\n\n  private getUserRole(): string {\n    return this.authenticationService.getUserFromLocalCache().role;\n  }\n\n  private clickButton(buttonId: string): void {\n    document.getElementById(buttonId).click();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-form-field {\r\n  width: 100%;\r\n  padding: 1%;\r\n}\r\n.button-row {\r\n  text-align: center;\r\n}\r\n\r\nmat-divider {\r\n  width: 30%;\r\n  display: flex;\r\n  margin: 0px auto 20px auto;\r\n  background-color: #212121;\r\n}\r\n",
                    "styleUrl": "./new-user-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "isAdmin": {
                    "name": "isAdmin",
                    "getSignature": {
                        "name": "isAdmin",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 61
                    }
                }
            },
            "templateData": "<h2 mat-dialog-title fxLayoutAlign=\"center\">Add Member</h2>\n<mat-divider></mat-divider>\n<ng-container class=\"add-member-form\">\n  <form\n    novalidate\n    class=\"example-container\"\n    [formGroup]=\"addUserForm\"\n    (ngSubmit)=\"onSubmit()\"\n  >\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Firstname</mat-label>\n      <input\n        matInput\n        class=\"form-control\"\n        placeholder=\"Firstname\"\n        formControlName=\"firstName\"\n      />\n    </mat-form-field>\n    <br />\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Lastname</mat-label>\n      <input\n        matInput\n        class=\"form-control\"\n        placeholder=\"Lastname\"\n        formControlName=\"lastName\"\n      />\n    </mat-form-field>\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Username</mat-label>\n      <input\n        matInput\n        class=\"form-control\"\n        placeholder=\"Username\"\n        formControlName=\"username\"\n      />\n    </mat-form-field>\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Email</mat-label>\n      <input\n        matInput\n        class=\"form-control\"\n        placeholder=\"Email\"\n        formControlName=\"email\"\n      />\n    </mat-form-field>\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Role</mat-label>\n      <mat-select placeholder=\"Choose Role\" formControlName=\"role\">\n        <mat-option value=\"ROLE_USER\"> USER </mat-option>\n        <mat-option value=\"ROLE_HR\" > HR </mat-option>\n        <mat-option value=\"ROLE_MANAGER\"> MANAGER </mat-option>\n        <mat-option value=\"ROLE_ADMIN\"> ADMIN </mat-option>\n        <mat-option value=\"ROLE_SUPER_ADMIN\"> SUPER ADMIN </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <!-- <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Profile Image</mat-label>\n      <input\n        matInput\n        type=\"file\"\n        accept=\"image/*\"\n        class=\"form-control\"\n        formControlName=\"profileImage\"\n      />\n    </mat-form-field> -->\n    <mat-checkbox color=\"primary\">\n      Primary theme checkbox\n    </mat-checkbox>\n    <br />\n\n    <!-- <div formGroupName=\"addressDto\">\n      <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Street</mat-label>\n        <input\n          matInput\n          class=\"form-control\"\n          placeholder=\"Street\"\n          formControlName=\"street\"\n        />\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>No.</mat-label>\n        <input\n          matInput\n          class=\"form-control\"\n          placeholder=\"HouseNo.\"\n          formControlName=\"houseNumber\"\n        />\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Post Code</mat-label>\n        <input\n          matInput\n          class=\"form-control\"\n          placeholder=\"Post Code\"\n          formControlName=\"postCode\"\n        />\n      </mat-form-field>\n    </div> -->\n    <div class=\"button-row\">\n      <button\n        [disabled]=\"\"\n        mat-raised-button\n        color=\"primary\"\n        type=\"submit\"\n        mat-dialog-close=\"true\"\n      >\n        Submit\n      </button>\n      |\n      <a mat-raised-button color=\"accent\" mat-dialog-close=\"true\">Cancel</a>\n    </div>\n  </form>\n</ng-container>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-05771a59d761ffc65bc30715bfcd1081526ef5be2d5a23d3a738cfb505f8fc7a93b1ab892800a3a3f07053076e80333075bd0a2d4103f2d46d7dd55f3acb0906",
            "file": "src/app/components/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRegister",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendNotification",
                    "args": [
                        {
                            "name": "error",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '../../service/authentication.service';\nimport { NotificationService } from '../../service/notification.service';\nimport { Subscription } from 'rxjs';\nimport { User } from '../../model/user';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NotificationType } from '../../enum/notification-type.enum';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  registerForm: FormGroup;\n  showLoading: boolean;\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private notificationService: NotificationService\n  ) {\n    this.registerForm = this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', Validators.required],\n      username: ['', Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.authenticationService.isUserLoggedIn()) {\n      this.router.navigateByUrl('/user-profile');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n  }\n\n  onRegister(user: User): void {\n    this.showLoading = true;\n    this.authenticationService.register(user).subscribe({\n      next: (response: User) => {\n        this.sendNotification(\n          NotificationType.SUCCESS,\n          `A new account was created for ${response.firstName}.\n          Please check your email for password to log in.`\n        );\n        this.showLoading = false;\n      },\n      error: (errorResponse: HttpErrorResponse) => {\n        console.log(errorResponse);\n        this.sendNotification(\n          NotificationType.ERROR,\n          errorResponse.error.message\n        );\n        this.showLoading = false;\n      },\n      complete: () => {\n        this.showLoading = false;\n      },\n    });\n  }\n\n  sendNotification(error: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(error, message);\n    } else {\n      this.notificationService.notify(\n        error,\n        'An error occured. Please try again.'\n      );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./register.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <mat-card class=\"box\">\n    <mat-card-header>\n      <mat-card-title>Register</mat-card-title>\n    </mat-card-header>\n    <form class=\"example-form\" [formGroup]=\"registerForm\">\n      <mat-card-content>\n        <mat-form-field class=\"example-full-width\">\n          <input\n            matInput\n            formControlName=\"firstName\"\n            placeholder=\"Firstname\"\n            name=\"firstName\"\n          />\n        </mat-form-field>\n        <mat-form-field class=\"example-full-width\" name=\"lastName\">\n          <input matInput formControlName=\"lastName\" placeholder=\"Lastname\" />\n        </mat-form-field>\n        <mat-form-field class=\"example-full-width\">\n          <input\n            matInput\n            formControlName=\"email\"\n            placeholder=\"Email\"\n            name=\"email\"\n          />\n        </mat-form-field>\n        <mat-form-field class=\"example-full-width\">\n          <input\n            matInput\n            formControlName=\"username\"\n            placeholder=\"Username\"\n            name=\"username\"\n          />\n        </mat-form-field>\n      </mat-card-content>\n      <button\n        type=\"submit\"\n        [disabled]=\"showLoading\"\n        mat-raised-button\n        color=\"primary\"\n        class=\"btn-block\"\n        (click)=\"onRegister(registerForm.value)\"\n      >\n        Register\n      </button>\n    </form>\n    <div>\n      <div class=\"mt-4\">\n        <div class=\"d-flex justify-content-center links\">\n          Already have an account?\n          <a class=\"ml-2\" style=\"color: #c2185b\" routerLink=\"/login\">Log In</a>\n        </div>\n      </div>\n    </div>\n    <ng-container *ngIf=\"showLoading\">\n      <div class=\"overlay\"></div>\n      <mat-progress-spinner\n        style=\"margin: 0 auto\"\n        [mode]=\"'indeterminate'\"\n      ></mat-progress-spinner>\n    </ng-container>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "RouteListComponent",
            "id": "component-RouteListComponent-5c4d8fd3799f53a5bf51e9f5d0e8bbc69c7db5bed2120ad6909e4bd1a671cb368d4bef154b8687d1378784b59fdd67970020816603c0f2139fcd9920b5e7267f",
            "file": "src/app/components/route/route-list/route-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-route-list",
            "styleUrls": [
                "./route-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./route-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-route-list',\n  templateUrl: './route-list.component.html',\n  styleUrls: ['./route-list.component.css']\n})\nexport class RouteListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  padding-top: 20px;\r\n}\r\n\r\n.container-header {\r\n  text-align: center;\r\n}\r\n\r\nimg {\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\n.m-r-15, .product-report .icon {\r\n  margin-right: 15px;\r\n}\r\na {\r\n  color: #f96332;\r\n}\r\n.agent .agent-content .agent-name h4 {\r\n  font-size: 17px;\r\n}\r\n.card {\r\n  background: #fff;\r\n  margin-bottom: 30px;\r\n  transition: .5s;\r\n  border: 0;\r\n  border-radius: .1875rem;\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 100%;\r\n  box-shadow: none;\r\n}\r\n\r\n.team-info li+li {\r\n  margin-left: -10px;\r\n}\r\n\r\n.social-icons li{\r\n  display: inline-block;\r\n}\r\n\r\n.team-info li{\r\n  margin-top: 5px;\r\n  display: inline-block;\r\n}\r\n\r\n.team-info li img {\r\n  width: 35px;\r\n  -webkit-border-radius: 50%;\r\n  -moz-border-radius: 50%;\r\n  -ms-border-radius: 50%;\r\n  border-radius: 50%;\r\n  border: 2px solid #fff;\r\n  box-shadow: 0px 2px 10px 0px rgba(0,0,0,0.2);\r\n}\r\n\r\n.agent .agent-avatar {\r\n  width: 100%\r\n}\r\n\r\n.agent .agent-avatar a {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden\r\n}\r\n\r\n.agent .agent-content .agent-name {\r\n  padding: 20px 30px\r\n}\r\n\r\n.agent .agent-content .agent-name h4 {\r\n  font-size: 17px\r\n}\r\n\r\n.agent .agent-content .agent-contact-details {\r\n  list-style: none;\r\n  color: #9e9e9e;\r\n  padding: 18px 32px !important;\r\n  background-color: #f5f5f5\r\n}\r\n\r\n.agent .agent-content .agent-contact-details li {\r\n  position: relative;\r\n  margin-left: 28px;\r\n  line-height: 24px;\r\n  padding: 3px 0;\r\n  word-break: break-all\r\n}\r\n\r\n.agent .agent-content .agent-contact-details li i {\r\n  font-size: 18px;\r\n  top: 5px;\r\n  left: -28px;\r\n  position: absolute\r\n}\r\n\r\n.agent .agent-content .agent-contact-details li span {\r\n  font-size: 16px\r\n}\r\n\r\n.agent .agent-content .social-icons {\r\n  padding: 10px 17px\r\n}\r\n\r\n.agent .agent-content .social-icons li {\r\n  list-style: none\r\n}\r\n\r\n.agent .agent-content .social-icons li a {\r\n  padding: 8px 15px\r\n}\r\n",
                    "styleUrl": "./route-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"container-header\"><h2>Routes</h2></div>\n  <div class=\"row clearfix\">\n    <div class=\"col-lg-3 col-md-6 col-sm-12\">\n      <div class=\"card agent\">\n        <div class=\"agent-avatar\">\n          <a href=\"agent-profile.html\">\n            <img\n              src=\"https://kletterblock.de/wp-content/uploads/2018/05/2018_05_11_06_03_46_Window.jpg\"\n              class=\"img-fluid\"\n              alt=\"\"\n            />\n          </a>\n        </div>\n        <div class=\"agent-content\">\n          <div class=\"agent-name\">\n            <h2  style=\"color: #303030\">Perfecto Mundo</h2>\n            <hr />\n\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <h4 style=\"color: #303030\">Grade:</h4>\n              </div>\n              <div class=\"col\">\n                <h3 style=\"color: #c2185b\">9b+</h3>\n              </div>\n            </div>\n            <hr />\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <h4 style=\"color: #303030\">Country:</h4>\n              </div>\n              <div class=\"col\">\n                <h3 style=\"color: #c2185b\">Spain</h3>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <h4 style=\"color: #303030\">Area:</h4>\n              </div>\n              <div class=\"col\">\n                <h3 style=\"color: #c2185b\">Margalef</h3>\n              </div>\n            </div>\n            <hr />\n            <span style=\"color: #303030\">Added to favorites by:</span>\n            <ul class=\"list-unstyled team-info m-b-0\">\n              <li class=\"m-r-15\"><small>Team</small></li>\n              <li>\n                <img\n                  src=\"https://bootdey.com/img/Content/avatar/avatar1.png\"\n                  alt=\"Avatar\"\n                />\n              </li>\n              <li>\n                <img\n                  src=\"https://bootdey.com/img/Content/avatar/avatar2.png\"\n                  alt=\"Avatar\"\n                />\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "UserDetailsComponent",
            "id": "component-UserDetailsComponent-ff7ab7eed1401cf3b6060ecc9d8cdde95dd39c3595613b425ee31df676b8ddd394fe949cd0a7ca41240be03d7b7be596ace1f5f0b7f630a2b674e7afa1755ca9",
            "file": "src/app/components/user/user-table/user-details/user-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-details",
            "styleUrls": [
                "./user-details.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./user-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onDestroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subject, Subscription, takeUntil } from 'rxjs';\nimport { User } from 'src/app/model/user';\nimport { UserService } from 'src/app/service/user.service';\nimport { UserEditFormComponent } from './user-edit-form/user-edit-form.component';\n\n@Component({\n  selector: 'app-user-details',\n  templateUrl: './user-details.component.html',\n  styleUrls: ['./user-details.component.css'],\n})\nexport class UserDetailsComponent implements OnInit, OnDestroy {\n  user?: User;\n  subscription?: Subscription;\n  onDestroy$ = new Subject<void>();\n\n  constructor(\n    private dialog: MatDialog,\n    private userService: UserService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.subscription = this.activatedRoute.params.subscribe((params) =>\n      this.userService\n        .getUser(params['username'])\n        .pipe(takeUntil(this.onDestroy$))\n        .subscribe((user) => {\n          this.user = user;\n        })\n    );\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscription?.unsubscribe();\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n\n  onEditUser(user: User) {\n    const dialogRef = this.dialog.open(UserEditFormComponent, {\n      width: '800px',\n      data: user,\n\n    });\n    dialogRef.afterClosed().subscribe(() => {\n      this.ngOnInit();\n\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body{margin-top:20px;\r\n  background-color:#f2f6fc;\r\n  color:#69707a;\r\n  }\r\n  .img-account-profile {\r\n      height: 10rem;\r\n  }\r\n  .rounded-circle {\r\n      border-radius: 50% !important;\r\n  }\r\n  .card {\r\n      box-shadow: 0 0.15rem 1.75rem 0 rgb(33 40 50 / 15%);\r\n  }\r\n  .card .card-header {\r\n      font-weight: 500;\r\n  }\r\n  .card-header:first-child {\r\n      border-radius: 0.35rem 0.35rem 0 0;\r\n  }\r\n\r\n  .small {\r\n    color: #303030;\r\n  }\r\n  .card-header {\r\n      padding: 1rem 1.35rem;\r\n      color: #303030;\r\n      margin-bottom: 0;\r\n      background-color: rgba(33, 40, 50, 0.03);\r\n      border-bottom: 1px solid rgba(33, 40, 50, 0.125);\r\n  }\r\n  .form-control, .dataTable-input {\r\n      display: block;\r\n      width: 100%;\r\n      padding: 0.875rem 1.125rem;\r\n      font-size: 0.875rem;\r\n      font-weight: 400;\r\n      line-height: 1;\r\n      color: #69707a;\r\n      background-color: #fff;\r\n      background-clip: padding-box;\r\n      border: 1px solid #c5ccd6;\r\n      -webkit-appearance: none;\r\n      -moz-appearance: none;\r\n      appearance: none;\r\n      border-radius: 0.35rem;\r\n      transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\r\n  }\r\n\r\n  .nav-borders .nav-link.active {\r\n      color: #0061f2;\r\n      border-bottom-color: #0061f2;\r\n  }\r\n  .nav-borders .nav-link {\r\n      color: #69707a;\r\n      border-bottom-width: 0.125rem;\r\n      border-bottom-style: solid;\r\n      border-bottom-color: transparent;\r\n      padding-top: 0.5rem;\r\n      padding-bottom: 0.5rem;\r\n      padding-left: 0;\r\n      padding-right: 0;\r\n      margin-left: 1rem;\r\n      margin-right: 1rem;\r\n  }\r\n\r\n",
                    "styleUrl": "./user-details.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container-xl px-4 mt-4\">\n  <div class=\"row\">\n    <div class=\"col-xl-4\">\n      <!-- Profile picture card-->\n      <div class=\"card mb-4 mb-xl-0\">\n        <div class=\"card-header\"> Profile Picture </div>\n        <div class=\"card-body text-center\">\n          <!-- Profile picture image-->\n          <img\n            class=\"img-account-profile rounded-circle mb-2\"\n            [src]=\"user?.profileImageUrl\"\n            alt=\"\"\n          />\n          <!-- Profile picture help block-->\n          <div class=\"small font-italic text-muted mb-4\">\n            JPG or PNG no larger than 5 MB\n          </div>\n          <!-- Profile picture upload button-->\n          <button mat-raised-button color=\"primary\" type=\"button\">\n            Upload new image\n          </button>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-xl-8\">\n      <!-- Account details card-->\n      <div class=\"card mb-4\">\n        <div class=\"card-header\"> User Details </div>\n        <div class=\"card-body\">\n          <form>\n            <!-- Form Group (username)-->\n            <div class=\"mb-3\">\n              <h4 class=\"small mb-1\" for=\"inputUsername\">Username:</h4>\n              <p class=\"small mb-1\">{{ user?.username }}</p>\n            </div>\n            <!-- Form Row-->\n            <div class=\"row gx-3 mb-3\">\n              <!-- Form Group (first name)-->\n              <div class=\"col-md-6\">\n                <h4 class=\"small mb-1\" for=\"inputFirstName\">Firstname:</h4>\n                <p class=\"small mb-1\">{{ user?.firstName }}</p>\n              </div>\n              <!-- Form Group (last name)-->\n              <div class=\"col-md-6\">\n                <h4 class=\"small mb-1\" for=\"inputLastName\">Lastname:</h4>\n                <p class=\"small mb-1\">{{ user?.lastName }}</p>\n              </div>\n            </div>\n            <!-- Form Row        -->\n            <div class=\"row gx-3 mb-3\">\n              <!-- Form Group (street name / House nr.)-->\n              <div class=\"col-md-6\">\n                <h4 class=\"small mb-1\" for=\"streetNr\">Street/Nr.:</h4>\n                <p class=\"small mb-1\">Hanauer Straße 3</p>\n              </div>\n              <!-- Form Group (location)-->\n              <div class=\"col-md-6\">\n                <h4 class=\"small mb-1\" for=\"inputCityZipCode\">City/Zip Code:</h4>\n                <p class=\"small mb-1\">Hanau, 62452</p>\n              </div>\n            </div>\n            <!-- Form Group (email address)-->\n            <div class=\"row gx-3 mb-3\">\n            <div class=\"col-md-6\">\n              <h4 class=\"small mb-1\" for=\"inputEmail\">Email:</h4>\n              <p class=\"small mb-1\">{{ user?.email }}</p>\n            </div>\n             <!-- Form Group (phone number)-->\n             <div class=\"col-md-6\">\n              <h4 class=\"small mb-1\" for=\"inputPhone\">Phone number:</h4>\n              <p class=\"small mb-1\">0177838383838</p>\n            </div>\n          </div>\n            <!-- Form Row-->\n            <div class=\"row gx-3 mb-3\">\n\n              <!-- Form Group (birthday)-->\n              <div class=\"col-md-6\">\n                <h4 class=\"small mb-1\" for=\"inputMemberSince\">Member since:</h4>\n                <p class=\"small mb-1\">{{ user?.joinDate }}</p>\n              </div>\n            </div>\n            <div class=\"row gx-3 mb-3\">\n              <!-- Form Group (phone number)-->\n              <div class=\"col-md-6\">\n                <h4 class=\"small mb-1\" for=\"inputTicklist\">Ticklist:</h4>\n                <ul>\n                  <li class=\"small mb-1\">Highway to heaven, 8a+</li>\n                  <li class=\"small mb-1\">Perfecto Mundo, 9b+</li>\n                  <li class=\"small mb-1\">Talfahrt, 7b</li>\n                </ul>\n              </div>\n            </div>\n            <!-- Save changes button-->\n            <button\n              mat-raised-button\n              color=\"primary\"\n              type=\"button\"\n              (click)=\"onEditUser(user)\"\n            >\n              Edit User\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "UserEditFormComponent",
            "id": "component-UserEditFormComponent-08d646b21d2ac03eca687f5d42d75011a26e41e6eff17cbe1d07db66e8239d64ba3134fc0d14d15623cf775a23e3146ba5d508f1c2a0355e824e151eac8fbf45",
            "file": "src/app/components/user/user-table/user-details/user-edit-form/user-edit-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-edit-form",
            "styleUrls": [
                "./user-edit-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./user-edit-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<UserEditFormComponent>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editUser",
                    "defaultValue": "new User()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editUserForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "fileName",
                    "defaultValue": "this.data.profileImageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "profileImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sendNotification",
                    "args": [
                        {
                            "name": "notificationType",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "notificationType",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "urlToFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpErrorResponse, HttpEvent } from '@angular/common/http';\nimport { Component, OnInit, Inject, HostListener } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Subscription } from 'rxjs';\nimport { NotificationType } from 'src/app/enum/notification-type.enum';\nimport { User } from 'src/app/model/user';\nimport { NotificationService } from 'src/app/service/notification.service';\nimport { UserService } from 'src/app/service/user.service';\n\n\n\n@Component({\n  selector: 'app-user-edit-form',\n  templateUrl: './user-edit-form.component.html',\n  styleUrls: ['./user-edit-form.component.css'],\n})\nexport class UserEditFormComponent implements OnInit {\n  public fileName: string = this.data.profileImageUrl;\n  public profileImage: File;\n  private subscriptions: Subscription[] = [];\n  public editUser = new User();\n\n  editUserForm: FormGroup;\n\n  constructor(\n    public dialogRef: MatDialogRef<UserEditFormComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: User,\n    private userService: UserService,\n    private notificationService: NotificationService\n  ) {\n    this.editUserForm = new FormGroup({\n      currentUsername: new FormControl(this.data.username, {\n        validators: [Validators.required],\n      }),\n      firstName: new FormControl(this.data.firstName, {\n        validators: [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(50),\n        ],\n      }),\n      lastName: new FormControl(this.data.lastName, {\n        validators: [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(50),\n        ],\n      }),\n      username: new FormControl(this.data.username, {\n        validators: [Validators.required],\n      }),\n      email: new FormControl(this.data.email, {\n        validators: [\n          Validators.required,\n          Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$'),\n        ],\n      }),\n      role: new FormControl(this.data.role, {\n        validators: [Validators.required],\n      }),\n      isActive: new FormControl(this.data.active, {}),\n      isNotLocked: new FormControl(this.data.notLocked, {}),\n    });\n  }\n\n  ngOnInit(): void {\n    this.urlToFile();\n}\n\n  public onUpdateUser() {\n    const formData = this.userService.createUserFormData(\n      this.editUserForm.value.currentUsername,\n      this.editUserForm.value,\n      this.profileImage\n    );\n\n    this.subscriptions.push(\n      this.userService.updateUser(formData).subscribe((response: User) => {\n        this.dialogRef.close();\n        this.sendNotification(\n          NotificationType.SUCCESS,\n          `${response.firstName} ${response.lastName} added successfully`\n        );\n      })\n    );\n  }\n\n  public getFile(event: any) {\n      this.profileImage = event.target.files[0];\n      this.fileName = this.profileImage.name;\n    }\n\n  private urlToFile() {\n    const imageUrl = ('https://robohash.org/' + this.data.username)\n\n     fetch(imageUrl)\n    .then(res => res.blob())\n    .then(blob => {\n      console.log(blob)\n     this.profileImage = new File([blob], 'profileImage', { type: blob.type})\n     console.log(this.profileImage)\n    })\n  }\n\n  private sendNotification(\n    notificationType: NotificationType,\n    message: string\n  ): void {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(\n        notificationType,\n        'An error occurred. Please try again.'\n      );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body{margin-top:20px;\r\n  background-color:#f2f6fc;\r\n  color:#69707a;\r\n  }\r\n  .img-account-profile {\r\n      height: 10rem;\r\n  }\r\n  .rounded-circle {\r\n      border-radius: 50% !important;\r\n  }\r\n  .card {\r\n      box-shadow: 0 0.15rem 1.75rem 0 rgb(33 40 50 / 15%);\r\n  }\r\n  .card .card-header {\r\n      font-weight: 500;\r\n  }\r\n  .card-header:first-child {\r\n      border-radius: 0.35rem 0.35rem 0 0;\r\n  }\r\n\r\n  .small {\r\n    color: #303030;\r\n  }\r\n  .card-header {\r\n      padding: 1rem 1.35rem;\r\n      margin-bottom: 0;\r\n      color: #303030;\r\n      background-color: rgba(33, 40, 50, 0.03);\r\n      border-bottom: 1px solid rgba(33, 40, 50, 0.125);\r\n  }\r\n  .form-control, .dataTable-input {\r\n      display: block;\r\n      width: 100%;\r\n      \r\n      font-size: 0.875rem;\r\n      font-weight: 400;\r\n      line-height: 1;\r\n      color: #69707a;\r\n      background-color: #fff;\r\n      background-clip: padding-box;\r\n      border: 1px solid #c5ccd6;\r\n      -webkit-appearance: none;\r\n      -moz-appearance: none;\r\n      appearance: none;\r\n      border-radius: 0.35rem;\r\n\r\n  }\r\n\r\n  .nav-borders .nav-link.active {\r\n      color: #0061f2;\r\n      border-bottom-color: #0061f2;\r\n  }\r\n  .nav-borders .nav-link {\r\n      color: #69707a;\r\n      border-bottom-width: 0.125rem;\r\n      border-bottom-style: solid;\r\n      border-bottom-color: transparent;\r\n      padding-top: 0.5rem;\r\n      padding-bottom: 0.5rem;\r\n      padding-left: 0;\r\n      padding-right: 0;\r\n      margin-left: 1rem;\r\n      margin-right: 1rem;\r\n  }\r\n\r\n  .uploadBtn {\r\n    width: auto;\r\n  }\r\n",
                    "styleUrl": "./user-edit-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UserEditFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "User",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UserEditFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "User",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-xl px-4 mt-4\">\n  <div class=\"col-xl-12\">\n    <!-- Account details card-->\n    <div class=\"card mb-4\">\n      <div class=\"card-header\">Edit Account Details</div>\n      <div class=\"card-body\">\n        <form [formGroup]=\"editUserForm\" (ngSubmit)=\"onUpdateUser()\">\n          <!-- Form Row-->\n          <div class=\"row gx-3 mb-3\">\n            <!-- Form Group (first name)-->\n            <div class=\"col-md-6\">\n              <label class=\"small mb-1\" for=\"inputFirstName\">First name</label>\n              <input\n                required\n                class=\"form-control\"\n                id=\"inputFirstName\"\n                formControlName=\"firstName\"\n                type=\"text\"\n              />\n            </div>\n            <!-- Form Group (last name)-->\n            <div class=\"col-md-6\">\n              <label class=\"small mb-1\" for=\"inputLastName\">Last name</label>\n              <input\n                required\n                class=\"form-control\"\n                id=\"inputLastName\"\n                formControlName=\"lastName\"\n                type=\"text\"\n              />\n            </div>\n          </div>\n          <div class=\"row gx-3 mb-3\">\n            <!-- Form Group (first name)-->\n            <div class=\"col-md-6\">\n              <label class=\"small mb-1\" for=\"inputCurrentUserame\"\n                >Current Username:</label\n              >\n              <input\n                required\n                class=\"form-control\"\n                id=\"inputCurrentUsername\"\n                formControlName=\"currentUsername\"\n                type=\"text\"\n              />\n            </div>\n            <!-- Form Group (last name)-->\n            <div class=\"col-md-6\">\n              <label class=\"small mb-1\" for=\"inputNewUsername\"\n                >New Username</label\n              >\n              <input\n                required\n                class=\"form-control\"\n                formControlName=\"username\"\n                id=\"inputNewUsername\"\n                type=\"text\"\n                value=\"New username\"\n              />\n            </div>\n          </div>\n          <!-- Form Group (email address)-->\n          <div class=\"mb-3\">\n            <label class=\"small mb-1\" for=\"inputEmailAddress\"\n              >Email address</label\n            >\n            <input\n              required\n              class=\"form-control\"\n              id=\"inputEmailAddress\"\n              formControlName=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email address\"\n            />\n          </div>\n          <!-- Form Row-->\n          <div class=\"row gx-3 mb-3\">\n            <!-- Form Group (role)-->\n            <div class=\"col-md-6\">\n              <label class=\"small mb-1\" for=\"Role\">Role</label>\n              <select\n                required\n                class=\"form-control\"\n                id=\"Role\"\n                formControlName=\"role\"\n              >\n                <option></option>\n                <option value=\"ROLE_USER\">USER</option>\n                <option value=\"ROLE_HR\">HR</option>\n                <option value=\"ROLE_MANAGER\">MANAGER</option>\n                <option value=\"ROLE_ADMIN\">ADMIN</option>\n                <option value=\"ROLE_SUPER_ADMIN\">SUPER ADMIN</option>\n              </select>\n            </div>\n          </div>\n          <div class=\"input-group mb-2\">\n            <div class=\"input-group-prepend\">\n              <span class=\"input-group-text\">Profile Picture</span>\n            </div>\n            <div class=\"custom-file\">\n              <input\n              accept=\"image/**\"\n              type=\"file\"\n              id=\"profileImage\"\n              class=\"custom-file-input\"\n              (change)=\"getFile($event)\"\n              >\n              <button id=\"profile-image-input\"></button>\n              <label class=\"custom-file-label\"><span [hidden]=\"!fileName\">{{fileName}}</span>\n              <span [hidden]=\"fileName\">Choose File</span></label>\n            </div>\n          </div>\n\n          <fieldset class=\"form-group\">\n            <div class=\"col-md-6\">\n              <input\n                required\n                class=\"form-check-input\"\n                id=\"inputActive\"\n                formControlName=\"isActive\"\n                type=\"checkbox\"\n                checked=\"data.isActive\"\n              />\n              <label class=\"small mb-1\" for=\"inputActive\">Active</label>\n            </div>\n            <div class=\"col-md-6\">\n              <input\n                required\n                class=\"form-check-input\"\n                id=\"inputnotLocked\"\n                formControlName=\"isNotLocked\"\n                type=\"checkbox\"\n                checked=\"data.isNotLocked\"\n              />\n              <label class=\"small mb-1\" for=\"inputnotLocked\">Unlocked</label>\n            </div>\n          </fieldset>\n          <br />\n          <!-- Save changes button-->\n          <button\n            mat-raised-button\n            color=\"primary\"\n            type=\"button\"\n            mat-dialog-close\n          >\n            Close\n          </button>\n          |\n          <button\n            mat-raised-button\n            color=\"primary\"\n            type=\"button\"\n            (click)=\"onUpdateUser()\"\n            mat-dialog-close\n          >\n            Save changes\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "UserProfileComponent",
            "id": "component-UserProfileComponent-68c93bb829fd2af78a7076ec4776f330d44b673eb3e84816ef53f4645bf76cd4aca564fbeb764fdb2f6372bf1a206908b47f0b0be5f423132251960a7fe621fa",
            "file": "src/app/components/user/user-profile/user-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile",
            "styleUrls": [
                "./user-profile.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-profile.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-profile works!</p>\n"
        },
        {
            "name": "UserTableComponent",
            "id": "component-UserTableComponent-594e656f3095e1afb2b020e3d924803f4bfa92e495cc6649eaa7ad690e7f229aae1d68e6849dd093c9a4320ba4c5528431492e638033b101b0801ebfa208315a",
            "file": "src/app/components/user/user-table/user-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-table",
            "styleUrls": [
                "./user-table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./user-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<User>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\n    'profileImageUrl',\n    'userId',\n    'firstName',\n    'lastName',\n    'username',\n    'email',\n    'isActive',\n    'details',\n    'delete',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Columns displayed in the table. Columns IDs can be added, removed, or reordered.</p>\n",
                    "line": 35,
                    "rawdescription": "\nColumns displayed in the table. Columns IDs can be added, removed, or reordered."
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ]
                },
                {
                    "name": "refreshing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilter",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [
                        {
                            "name": "showNotification",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "showNotification",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteMember",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openAddFormDialog",
                    "args": [
                        {
                            "name": "enterAnimation",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enterAnimation",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendNotification",
                    "args": [
                        {
                            "name": "error",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { User } from 'src/app/model/user';\nimport { UserService } from 'src/app/service/user.service';\nimport { Subscription } from 'rxjs';\nimport { NotificationService } from 'src/app/service/notification.service';\nimport { NotificationType } from 'src/app/enum/notification-type.enum';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\nimport { NewUserFormComponent } from './new-user-form/new-user-form.component';\n\n@Component({\n  selector: 'app-user-table',\n  templateUrl: './user-table.component.html',\n  styleUrls: ['./user-table.component.css'],\n})\nexport class UserTableComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n  dataSource: MatTableDataSource<User>;\n  data: User[] = [];\n  refreshing: boolean;\n  user: User;\n  private subscriptions: Subscription[] = [];\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = [\n    'profileImageUrl',\n    'userId',\n    'firstName',\n    'lastName',\n    'username',\n    'email',\n    'isActive',\n    'details',\n    'delete',\n  ];\n\n  constructor(\n    private dialog: MatDialog,\n    private userService: UserService,\n    private notificationService: NotificationService\n  ) {}\n  ngOnInit(): void {\n    this.getUsers(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n  }\n\n  ngAfterViewInit(): void {\n\n  }\n\n  getUsers(showNotification: boolean): void {\n    const observer = {\n      next: (response: User[]) => {\n        this.userService.addUsersToLocalCache(response);\n        this.data = response;\n        this.dataSource = new MatTableDataSource<User>(this.data);\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n        this.refreshing = false;\n        if (showNotification) {\n          this.sendNotification(\n            NotificationType.SUCCESS,\n            `${response.length} user(s) loaded succesfully.`\n          );\n        }\n      },\n      error: (errorResponse: HttpErrorResponse) => {\n        this.sendNotification(\n          NotificationType.ERROR,\n          errorResponse.error.message\n        );\n        this.refreshing = false;\n      },\n      complete: () => {\n        this.refreshing = false;\n      },\n    };\n\n    this.subscriptions.push(this.userService.getUsers().subscribe(observer));\n  }\n\n  sendNotification(error: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(error, message);\n    } else {\n      this.notificationService.notify(\n        error,\n        'An error occured. Please try again.'\n      );\n    }\n  }\n\n  onDeleteMember(userId: number) {}\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  openAddFormDialog(enterAnimation: any) {\n    this.dialog.open(NewUserFormComponent, {\n      enterAnimationDuration: enterAnimation,\n      exitAnimationDuration: enterAnimation,\n      width: '50%',\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".full-width-table {\n  width: 100%;\n}\n\n\nth.mat-header-cell {\n  text-align: left;\n  max-width: 300px;\n}\n\nth.mat-sort-header-sorted {\n  color: black;\n}\n\n\n\n.filter-input {\n  margin-left: 75px;\n\n}\n\n#table {\n  width: 100%;\n  overflow-x: auto;\n  overflow-y: hidden;\n  padding: 20px;\n}\n\n.table-container {\n  display: flex;\n  flex-direction: column;\n  max-height: 500px;\n  min-width: 300px;\n}\n\n\n.mobile-label {\n  display: none;\n}\n\n.mat-row:hover {\n  background-color: #303030;\n}\n.open-dialog-btn {\n  margin-left: 25px;\n}\n\n\n\n/* @media(max-width: 600px) {\n  .mobile-label {\n    width: 80px;\n    display: inline-block;\n        font-weight: bold;\n  }\n\n  .mat-header-row {\n    display: none;\n  }\n\n  .mat-row {\n    flex-direction: column;\n    align-items: start;\n    padding: 8px 24px;\n  }\n}*/\n",
                    "styleUrl": "./user-table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"example-button-container\">\n  <!-- <button\n    class=\"open-dialog-btn\"\n    mat-mini-fab\n    color=\"primary\"\n    aria-label=\"Example icon button with a plus one icon\"\n    (click)=\"openAddFormDialog('1000ms')\"\n  >\n    <mat-icon>add</mat-icon>\n  </button> -->\n  <mat-form-field class=\"filter-input\" appearance=\"standard\">\n    <mat-label>Filter Table</mat-label>\n    <input #input matInput placeholder=\"Search\" (keyup)=\"applyFilter($event)\" />\n  </mat-form-field>\n</div>\n\n<div class=\"table-container mat-elevation-z10\">\n  <table #table mat-table [dataSource]=\"dataSource\" matSort>\n    <ng-container matColumnDef=\"profileImageUrl\">\n      <th mat-header-cell *matHeaderCellDef>Photo</th>\n      <td mat-cell *matCellDef=\"let user\">\n        <img width=\"40\" height=\"40\" src=\"{{ user?.profileImageUrl }}\" alt=\"\" />\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"userId\">\n      <th\n        mat-header-cell\n        *matHeaderCellDef\n        mat-sort-header\n        sortActionDescription=\"Sort by userId\"\n      >\n        UserID\n      </th>\n      <td mat-cell *matCellDef=\"let user\">{{ user.userId }}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"firstName\">\n      <th\n        mat-header-cell\n        *matHeaderCellDef\n        mat-sort-header\n        sortActionDescription=\"Sort by firstName\"\n      >\n        Firstname\n      </th>\n      <td mat-cell *matCellDef=\"let user\">{{ user.firstName }}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"lastName\">\n      <th\n        mat-header-cell\n        *matHeaderCellDef\n        mat-sort-header\n        sortActionDescription=\"Sort by lastName\"\n      >\n        Lastname\n      </th>\n      <td mat-cell *matCellDef=\"let user\">{{ user.lastName }}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"username\">\n      <th\n        mat-header-cell\n        *matHeaderCellDef\n        mat-sort-header\n        sortActionDescription=\"Sort by username\"\n      >\n        Username\n      </th>\n      <td mat-cell *matCellDef=\"let user\">{{ user.username }}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"email\">\n      <th\n        mat-header-cell\n        *matHeaderCellDef\n\n      >\n        Email\n      </th>\n      <td mat-cell *matCellDef=\"let user\">{{ user.email }}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"isActive\">\n      <th\n        mat-header-cell\n        *matHeaderCellDef\n        mat-sort-header\n        sortActionDescription=\"Sort by isActive\"\n      >\n        Status\n      </th>\n      <td mat-cell *matCellDef=\"let user\">\n        <span [hidden]=\"user.isActive\" style=\"color: #37b34a\">Active</span>\n        <span [hidden]=\"!user.isActive\" style=\"color: #f44a3e\">Inactive</span>\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"details\">\n      <th mat-header-cell *matHeaderCellDef>Details</th>\n      <td mat-cell *matCellDef=\"let user\">\n        <button\n          class=\"table-btn\"\n          mat-icon-button\n          color=\"primary\"\n          [routerLink]=\"['/user', user.username]\"\n        >\n          <mat-icon class=\"mat-18\">reorder</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"delete\">\n      <th mat-header-cell *matHeaderCellDef>Delete</th>\n      <td mat-cell *matCellDef=\"let user\">\n        <button\n          class=\"table-btn\"\n          mat-icon-button\n          color=\"warn\"\n          (click)=\"onDeleteMember(user.userId)\"\n        >\n          <mat-icon class=\"mat-18\">delete</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n    <ng-container *ngIf=\"refreshing\">\n      <div class=\"overlay\"></div>\n      <mat-progress-spinner\n        style=\"margin: 0 auto\"\n        [mode]=\"'indeterminate'\"\n      ></mat-progress-spinner>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n    <!-- SHOWS WHEN DATA DOES NOT EXIST (FILTER) -->\n    <tr *matNoDataRow>\n      <td class=\"mat-cell\" colspan=\"4\">\n        There is no member with the lastname: {{ input.value }}\n      </td>\n    </tr>\n  </table>\n  <mat-paginator [pageSizeOptions]=\"[5, 20, 50]\" showFirstLastButtons>\n  </mat-paginator>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AngularMaterialModule",
            "id": "module-AngularMaterialModule-3dfeb637ba8bc2d8c572390d70f77296a649555b9d605f4de9fa108b5acb244ee58c83b61b4ca66df3b6b9d70037db6b504778043d95ab2c8ca23f57477b5fce",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/angular-material.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\nconst materialModules = [\r\n  CdkTreeModule,\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatProgressSpinnerModule,\r\n  MatPaginatorModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatFormFieldModule,\r\n  MatButtonToggleModule,\r\n  MatTreeModule,\r\n  OverlayModule,\r\n  PortalModule,\r\n  MatBadgeModule,\r\n  MatGridListModule,\r\n  MatRadioModule,\r\n  MatDatepickerModule,\r\n  MatTooltipModule,\r\n  MatDialogModule\r\n\r\n];\r\n@NgModule({\r\n  imports: [CommonModule, ...materialModules],\r\n  exports: [...materialModules],\r\n})\r\nexport class AngularMaterialModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-1c8952465d2a348778e1f39c2327cf202b273c4f6b1a4ab7def2d26d703d29b15080c958637b34b95466a26db2a411b1053a0346ea91aefaecf4f3e37fedf10f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { AuthenticationGuard } from './guard/authentication.guard';\nimport { AuthenticationService } from './service/authentication.service';\nimport { UserService } from './service/user.service';\nimport { AuthInterceptor } from './interceptor/auth.interceptor';\nimport { NotificationModule } from './notification.module';\nimport { NotificationService } from './service/notification.service';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AngularMaterialModule } from './angular-material.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NavigationComponent } from './components/navigation/navigation.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { UserProfileComponent } from './components/user/user-profile/user-profile.component';\nimport { UserTableComponent } from './components/user/user-table/user-table.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { RouteListComponent } from './components/route/route-list/route-list.component';\nimport { UserDetailsComponent } from './components/user/user-table/user-details/user-details.component';\nimport { UserEditFormComponent } from './components/user/user-table/user-details/user-edit-form/user-edit-form.component';\nimport { NewUserFormComponent } from './components/user/user-table/new-user-form/new-user-form.component';\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent,\n    NavigationComponent,\n    UserProfileComponent,\n    UserTableComponent,\n    RouteListComponent,\n    UserDetailsComponent,\n    UserEditFormComponent,\n    NewUserFormComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    NotificationModule,\n    BrowserAnimationsModule,\n    AngularMaterialModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n\n  ],\n  providers: [ AuthenticationService,\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true},\n    NotificationService, AuthenticationGuard,  UserService\n  ],\n  bootstrap: [AppComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "AuthenticationService"
                        },
                        {
                            "name": "NotificationService"
                        },
                        {
                            "name": "UserService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "NewUserFormComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        },
                        {
                            "name": "RouteListComponent"
                        },
                        {
                            "name": "UserDetailsComponent"
                        },
                        {
                            "name": "UserEditFormComponent"
                        },
                        {
                            "name": "UserProfileComponent"
                        },
                        {
                            "name": "UserTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AngularMaterialModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "NotificationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-dc670e69b5bb9e267d00a87fc8cf677b8b85c4010e5e2442ea6044ac3a465f3805d26860f2111a0fa7f7382e8ad5196acfe68f6e68baa0319943a6572731d607",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { NavigationComponent } from './components/navigation/navigation.component';\nimport { UserProfileComponent } from './components/user/user-profile/user-profile.component';\nimport { UserTableComponent } from './components/user/user-table/user-table.component';\nimport { RouteListComponent } from './components/route/route-list/route-list.component';\nimport { UserDetailsComponent } from './components/user/user-table/user-details/user-details.component';\nimport { UserEditFormComponent } from './components/user/user-table/user-details/user-edit-form/user-edit-form.component';\nimport { NewUserFormComponent } from './components/user/user-table/new-user-form/new-user-form.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'navigation', component: NavigationComponent },\n  { path: 'user-profile', component: UserProfileComponent },\n  { path: 'user-table', component: UserTableComponent },\n  { path: 'user/:username', component: UserDetailsComponent },\n  { path: 'user/edit', component: UserEditFormComponent },\n  { path: 'user/add', component: NewUserFormComponent },\n  { path: 'route-list', component: RouteListComponent },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationModule",
            "id": "module-NotificationModule-6dfa9eeb70431d17830c491bf7b551ce330b14f5e009b26826639b77beb5f7efc483cd0d14fb2d251f87acf668f461e486a05a4509523795e5ee7717983d30fa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/notification.module.ts",
            "methods": [],
            "sourceCode": "import { NotifierModule, NotifierOptions } from 'angular-notifier';\r\nimport { NgModule } from '@angular/core';\r\n\r\nconst customNotifierOptions: NotifierOptions = {\r\n  position: {\r\n    horizontal: {\r\n      position: 'left',\r\n      distance: 100,\r\n    },\r\n    vertical: {\r\n      position: 'top',\r\n      distance: 12,\r\n      gap: 10,\r\n    },\r\n  },\r\n  theme: 'material',\r\n  behaviour: {\r\n    autoHide: 5000,\r\n    onClick: 'hide',\r\n    onMouseover: 'pauseAutoHide',\r\n    showDismissButton: true,\r\n    stacking: 4,\r\n  },\r\n  animations: {\r\n    enabled: true,\r\n    show: {\r\n      preset: 'slide',\r\n      speed: 300,\r\n      easing: 'ease',\r\n    },\r\n    hide: {\r\n      preset: 'fade',\r\n      speed: 300,\r\n      easing: 'ease',\r\n      offset: 50,\r\n    },\r\n    shift: {\r\n      speed: 300,\r\n      easing: 'ease',\r\n    },\r\n    overlap: 150,\r\n  },\r\n};\r\n\r\n@NgModule({\r\n  imports: [NotifierModule.withConfig(customNotifierOptions)],\r\n  exports: [NotifierModule],\r\n})\r\nexport class NotificationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "customNotifierOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/notification.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NotifierOptions",
                "defaultValue": "{\r\n  position: {\r\n    horizontal: {\r\n      position: 'left',\r\n      distance: 100,\r\n    },\r\n    vertical: {\r\n      position: 'top',\r\n      distance: 12,\r\n      gap: 10,\r\n    },\r\n  },\r\n  theme: 'material',\r\n  behaviour: {\r\n    autoHide: 5000,\r\n    onClick: 'hide',\r\n    onMouseover: 'pauseAutoHide',\r\n    showDismissButton: true,\r\n    stacking: 4,\r\n  },\r\n  animations: {\r\n    enabled: true,\r\n    show: {\r\n      preset: 'slide',\r\n      speed: 300,\r\n      easing: 'ease',\r\n    },\r\n    hide: {\r\n      preset: 'fade',\r\n      speed: 300,\r\n      easing: 'ease',\r\n      offset: 50,\r\n    },\r\n    shift: {\r\n      speed: 300,\r\n      easing: 'ease',\r\n    },\r\n    overlap: 150,\r\n  },\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiUrl: 'http://localhost:8081'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:8081'\n}"
            },
            {
                "name": "EXAMPLE_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/user/user-table/user-table-datasource.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UserTableItem[]",
                "defaultValue": "[\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "materialModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/angular-material.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  CdkTreeModule,\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatProgressSpinnerModule,\r\n  MatPaginatorModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatFormFieldModule,\r\n  MatButtonToggleModule,\r\n  MatTreeModule,\r\n  OverlayModule,\r\n  PortalModule,\r\n  MatBadgeModule,\r\n  MatGridListModule,\r\n  MatRadioModule,\r\n  MatDatepickerModule,\r\n  MatTooltipModule,\r\n  MatDialogModule\r\n\r\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "compare",
                "file": "src/app/components/user/user-table/user-table-datasource.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Simple sort comparator for example ID/Name columns (for client-side sorting).</p>\n",
                "args": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isAsc",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isAsc",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "HeaderType",
                "childs": [
                    {
                        "name": "AUTHORIZATION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Authorization"
                    },
                    {
                        "name": "JWT_TOKEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Jwt-Token"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enum/header-type.enum.ts"
            },
            {
                "name": "NotificationType",
                "childs": [
                    {
                        "name": "DEFAULT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    },
                    {
                        "name": "SUCCESS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    },
                    {
                        "name": "INFO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "WARNING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enum/notification-type.enum.ts"
            },
            {
                "name": "Role",
                "childs": [
                    {
                        "name": "SUPER_ADMIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ROLE_SUPER_ADMIN"
                    },
                    {
                        "name": "ADMIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ROLE_ADMIN"
                    },
                    {
                        "name": "MANAGER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ROLE_MANAGER"
                    },
                    {
                        "name": "USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ROLE_USER"
                    },
                    {
                        "name": "HR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ROLE_HR"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enum/role.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/notification.module.ts": [
                {
                    "name": "customNotifierOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/notification.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotifierOptions",
                    "defaultValue": "{\r\n  position: {\r\n    horizontal: {\r\n      position: 'left',\r\n      distance: 100,\r\n    },\r\n    vertical: {\r\n      position: 'top',\r\n      distance: 12,\r\n      gap: 10,\r\n    },\r\n  },\r\n  theme: 'material',\r\n  behaviour: {\r\n    autoHide: 5000,\r\n    onClick: 'hide',\r\n    onMouseover: 'pauseAutoHide',\r\n    showDismissButton: true,\r\n    stacking: 4,\r\n  },\r\n  animations: {\r\n    enabled: true,\r\n    show: {\r\n      preset: 'slide',\r\n      speed: 300,\r\n      easing: 'ease',\r\n    },\r\n    hide: {\r\n      preset: 'fade',\r\n      speed: 300,\r\n      easing: 'ease',\r\n      offset: 50,\r\n    },\r\n    shift: {\r\n      speed: 300,\r\n      easing: 'ease',\r\n    },\r\n    overlap: 150,\r\n  },\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiUrl: 'http://localhost:8081'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:8081'\n}"
                }
            ],
            "src/app/components/user/user-table/user-table-datasource.ts": [
                {
                    "name": "EXAMPLE_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/user/user-table/user-table-datasource.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserTableItem[]",
                    "defaultValue": "[\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n]"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/angular-material.module.ts": [
                {
                    "name": "materialModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/angular-material.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  CdkTreeModule,\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatProgressSpinnerModule,\r\n  MatPaginatorModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatFormFieldModule,\r\n  MatButtonToggleModule,\r\n  MatTreeModule,\r\n  OverlayModule,\r\n  PortalModule,\r\n  MatBadgeModule,\r\n  MatGridListModule,\r\n  MatRadioModule,\r\n  MatDatepickerModule,\r\n  MatTooltipModule,\r\n  MatDialogModule\r\n\r\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/components/user/user-table/user-table-datasource.ts": [
                {
                    "name": "compare",
                    "file": "src/app/components/user/user-table/user-table-datasource.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Simple sort comparator for example ID/Name columns (for client-side sorting).</p>\n",
                    "args": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/enum/header-type.enum.ts": [
                {
                    "name": "HeaderType",
                    "childs": [
                        {
                            "name": "AUTHORIZATION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Authorization"
                        },
                        {
                            "name": "JWT_TOKEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Jwt-Token"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enum/header-type.enum.ts"
                }
            ],
            "src/app/enum/notification-type.enum.ts": [
                {
                    "name": "NotificationType",
                    "childs": [
                        {
                            "name": "DEFAULT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        },
                        {
                            "name": "SUCCESS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        },
                        {
                            "name": "INFO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "WARNING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enum/notification-type.enum.ts"
                }
            ],
            "src/app/enum/role.enum.ts": [
                {
                    "name": "Role",
                    "childs": [
                        {
                            "name": "SUPER_ADMIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ROLE_SUPER_ADMIN"
                        },
                        {
                            "name": "ADMIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ROLE_ADMIN"
                        },
                        {
                            "name": "MANAGER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ROLE_MANAGER"
                        },
                        {
                            "name": "USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ROLE_USER"
                        },
                        {
                            "name": "HR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ROLE_HR"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enum/role.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "login",
                        "pathMatch": "full"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "register",
                        "component": "RegisterComponent"
                    },
                    {
                        "path": "navigation",
                        "component": "NavigationComponent"
                    },
                    {
                        "path": "user-profile",
                        "component": "UserProfileComponent"
                    },
                    {
                        "path": "user-table",
                        "component": "UserTableComponent"
                    },
                    {
                        "path": "user/:username",
                        "component": "UserDetailsComponent"
                    },
                    {
                        "path": "user/edit",
                        "component": "UserEditFormComponent"
                    },
                    {
                        "path": "user/add",
                        "component": "NewUserFormComponent"
                    },
                    {
                        "path": "route-list",
                        "component": "RouteListComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/angular-material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "materialModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/route/route-list/route-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RouteListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/user-profile/user-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/user-table/new-user-form/new-user-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewUserFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/user-table/user-details/user-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/user-table/user-details/user-edit-form/user-edit-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserEditFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/user-table/user-table-datasource.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserTableDataSource",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "src/app/components/user/user-table/user-table-datasource.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserTableItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/user-table/user-table-datasource.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compare",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/components/user/user-table/user-table-datasource.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/user/user-table/user-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserTableComponent",
                "coveragePercent": 5,
                "coverageCount": "1/18",
                "status": "low"
            },
            {
                "filePath": "src/app/guard/authentication.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interceptor/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/model/custom-http-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CustomHttpResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/model/file-upload.status.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FileUploadStatus",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/model/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/notification.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customNotifierOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/service/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}